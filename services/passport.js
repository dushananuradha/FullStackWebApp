const passport = require("passport");

//Stategy and are properties of module passport-google-oauth20
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = require("mongoose");
const keys = require("../config/keys");

const User = mongoose.model("users"); //User is the model class

//serializeUser() takes a user model and generate a unique info (ID) and then, will convert into a cookie
passport.serializeUser((user, done) => {
	done(null, user.id);
	//user.id is generated by MongoDB, and is used to uniquely identify the user inside of cookie
});

//deSerializeUser() takes ID generated by serializeUser() and turn it back into an actual user model (mongoose model instance)
passport.deserializeUser((id, done) => {
	User.findById(id).then((user) => {
		done(null, user);
	});
});

//tell passport to use GoogleStrategy
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			//callbackURL => the route, user will be sent to after they grant permission to application
			callbackURL: "/auth/google/callback",
		},
		(accessToken, refreshToken, profile, done) => {
			console.log("profile.id", profile.id);
			User.findOne({ googleId: profile.id }).then((existingUser) => {
				if (existingUser) {
					//already have a record with given profile ID
					done(null, existingUser);
				} else {
					//Don't have a user with given profile Id, so create a new.
					new User({ googleId: profile.id })
						.save()
						.then((user) => done(null, user));
				}
			});
		}
	)
);
